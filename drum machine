<!-- html
<!-- <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script> -->
<div id="app"></div>
-->

<!--css
@font-face {
  font-family: 'DSEG14-Classic';
  src: url('https://cdn.jsdelivr.net/npm/dseg@0.43.0/fonts/DSEG14-Classic/DSEG14Classic-Regular.woff2') format('woff2'),
  url('https://cdn.jsdelivr.net/npm/dseg@0.43.0/fonts/DSEG14-Classic/DSEG14Classic-Regular.woff') format('woff'),
  url('https://cdn.jsdelivr.net/npm/dseg@0.43.0/fonts/DSEG14-Classic/DSEG14Classic-Regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

html {
  height: 100%;
}

body {
  height: 100%;
  background-color: #555;

}

.round-button {
  cursor: pointer;
  position: relative;
  transition-duration: 0.5s;
  width: 30px;
  height: 30px;
  padding: 5px;
  box-sizing: border-box;
  box-shadow: 1px 1px 1px 2px #161616;
  border-radius: 50%;
  background-image: radial-gradient(at 25% bottom, #282828, #161616 50%, grey);
  &:after {
    font-size: 12px;
    color: #bfbfbf;
    position: absolute;
    display: block;
    top: calc(100% + 5px);
    left: 50%;
    transform: translate(-50%, 0);
  }
  svg {
    path {
      fill: grey;
      transition-duration: 0.5s;
    }
  }
  &--on, &:active {
    box-shadow: 1px 1px 1px 1px #161616;
    svg {
      path {
        fill: #c4ff82;

      }
    }
  }
}

.drum-machine-body {
  font-family: 'Russo One', sans-serif;
  background-color: #282828;
  border-radius: 10px;
  padding: 1em;
  display: inline-block;
  position: relative;
  left: 50%;
  margin-top: 10vh;
  transform: translate(-50%, 0);
  &__top {
    color: white;
    font-size: 1.5rem;
    padding: 1em;
    background-color: #262626;
  }
  &__bottom {
    display: grid;
    grid-gap: 3px;
    grid-template-columns: 1fr 2fr;
  }
  &__left-pad {
    padding: 0 1em;
    display: flex;
    flex-direction: column;
    background-color: #262626;
    padding: 1em;
    box-shadow: inset 0 0 3px #111;
    border-radius: 10px;
  }
}

.volume-display {
  font-family: 'DSEG14-Classic';
  padding: 0.5em;
  background-color: #161616;
  color: transparent;
  transition-duration: 1s;
  &--on {
    color: #fb7c00;
  }
}

.drum-display {
  background-color: #bcbcbc;
  margin-top: 1em;
  padding: 0 0.5em;
  height: 2em;
  text-align: center;
  line-height: 2em;
  box-shadow: inset 0 0 2px 1px #161616;
  color: #262626;
  font-family: 'DSEG14-Classic';
  transition-duration: 0.5s;
  &--on {
    background-color: #77abff;
  }
}

.button-panel {
  display: flex;
  padding: 1em 0;
  div[role="button"] {
    margin-right: 1em;
    &:last-child {
      margin-right: 0;
    }
  }
}

.power-button {
  &:after {
    content: 'Power';
  }
  &.round-button--on {
    background: radial-gradient(rgba(196, 255, 130, 0.5), transparent 70%);
  }
}

.vol-plus {
  &:after {
    content: 'Vol+';
  }
}

.vol-minus {
  &:after {
    content: 'Vol-';
  }
}

.drum-pad-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 10px;
  padding: 1em;
  pointer-events: none;
  border-radius: 10px;
  background-color: #262626;
  box-shadow: inset 0 0 3px #111;
  &--on {
    pointer-events: all;
  }
}

.drum-pad {
  position: relative;
  user-select: none;
  box-sizing: border-box;
  cursor: pointer;
  text-align: center;
  color: #444;
  background-color: #282828;
  border-radius: 50%;
  padding-top: 100%;
  background: radial-gradient(#282828, #161616 60%, grey);
  box-shadow: 3px 3px 1px 3px #161616;
  &:focus {
    outline: none;
  }
  &--active, &:active {
    box-shadow: 1px 1px 1px 3px #161616, inset 0 0 10px 1px #005ef7;
    border-color: #005ef7;
    color: #a0c4ff;
    text-shadow: 0 0 5px #a0c4ff;
    outline: none;
  }
  span {
    position: absolute;
    text-shadow: 0 0 2px black;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}

.project-info {
  font-size: 11px;
  margin-top: auto;
  border-radius: 4px;
  color: #555;
  a {
    text-decoration: none;
    color: #555;
    &:hover {
      color: orange;
    }
  }
}-->

<!--js
/*
* Description: Freecodecamp Build a Drum Machine project
* Author: Alex Askov
* Github: https://github.com/askov/drum-machine
*/

class DrumMachine extends React.Component {
  constructor() {
    super();
    this.playAudio = this.playAudio.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleKeyUp = this.handleKeyUp.bind(this);
    this.updateDisplay = this.updateDisplay.bind(this);
    this.handlePowerClick = this.handlePowerClick.bind(this);
    this.activatePad = this.activatePad.bind(this);

    this.handleVolumeUp = this.handleVolumeUp.bind(this);
    this.handleVolumeDown = this.handleVolumeDown.bind(this);

    this.state = {
      display: '',
      volume: 80,
      power: false,
      kit: [
        { key: 'Q', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20CLHH.wav?1532352722339', name: 'CLHH' },
        { key: 'W', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20SNR%20D1.wav?1532352722730', name: 'SNR D1' },
        { key: 'E', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20RIM%20SHT.wav?1532352722795', name: 'RIM SHT' },
        { key: 'A', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20SNR%20D2.wav?1532352722873', name: 'SNR D2' },
        { key: 'S', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20RIDE.wav?1532352722922', name: 'RIDE' },
        { key: 'D', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20TOM1.wav?1532352723451', name: 'TOM1' },
        { key: 'Z', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20TOM2.wav?1532352723760', name: 'TOM2' },
        { key: 'X', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20COWBELL.wav?1532352724065', name: 'COWBELL' },
        { key: 'C', active: false, src: 'https://cdn.glitch.com/0966cc53-0935-45e4-9edf-7c4fa500e219%2FRX15%20OPHH.wav?1532352724689', name: 'OPHH' },
      ]
    };
  }
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
    document.addEventListener('keyup', this.handleKeyUp);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
    document.removeEventListener('keyup', this.handleKeyUp);
  }
  playAudio(audio) {
    audio.pause();
    audio.currentTime = 0;
    audio.play();
    this.updateDisplay(audio.dataset.name);
  }
  updateDisplay(text) {
    this.setState({ display: text });
  }
  mapKeyCode(code) {
    const keymap = {
      81: 'Q',
      87: 'W',
      69: 'E',
      65: 'A',
      83: 'S',
      68: 'D',
      90: 'Z',
      88: 'X',
      67: 'C',
    };
    return keymap[code]
  }
  handleKeyUp(e) {
    const x = this.mapKeyCode(e.keyCode);
    this.deactivatePad(x);
  }
  handleKeyDown(e) {
    if (!this.state.power) return;
    const x = this.mapKeyCode(e.keyCode);
    if (!x) return;
    this.activatePad(x);
    const audio = document.getElementById(x);
    if (!audio) return;
    audio.click();
  }
  activatePad(key) {
    this.setState({
      kit: this.state.kit.map(el => {
        return el.key === key ? Object.assign({}, el, { active: true }) : el;
      })
    });
  }
  deactivatePad(key) {
    this.setState({
      kit: this.state.kit.map(el => {
        return el.key == key ? Object.assign({}, el, { active: false }) : el;
      })
    });
  }
  handlePowerClick() {
    const text = this.state.power ? '' : 'Welcome';
    this.setState({ power: !this.state.power });
    this.setState({ display: text });
  }

  handleVolumeUp() {
    if (this.state.volume < 100) {
      this.setState({ volume: this.state.volume + 1 })
    }
    this.updateVolume();
  }

  handleVolumeDown() {
    if (this.state.volume > 0) {
      this.setState({ volume: this.state.volume - 1 })
    }
    this.updateVolume();
  }

  updateVolume() {
    const audios = document.querySelectorAll('audio');
    audios.forEach(audio => {
      audio.volume = this.state.volume / 100;
    });
  }

  render() {
    return (
      <div id="drum-machine" className="drum-machine-body">
        <div className="drum-machine-body__top">BeatPower <span style={{ float: 'right' }}>DMZ0</span></div>
        <div className="drum-machine-body__bottom">
          <div className="drum-machine-body__left-pad">
            <VolumeDisplay
              power={this.state.power}
              volume={this.state.volume} />
            <ButtonPanel
              power={this.state.power}
              handleVolumeUp={this.handleVolumeUp}
              handleVolumeDown={this.handleVolumeDown}
              handlePowerClick={this.handlePowerClick} />
            <Display
              text={this.state.display}
              power={this.state.power} />
            <DeviceFooter />
          </div>
          <div className={'drum-pad-container' + (this.state.power ? ' drum-pad-container--on' : '')}>
            {
              this.state.kit.map(pad =>
                <DrumPad
                  key={pad.key}
                  volume={this.state.volume}
                  pad={pad}
                  play={this.playAudio} />
              )
            }
          </div>
        </div>
      </div>
    );
  }
}

class DrumPad extends React.Component {
  constructor(props) {
    super(props);
    this.audioRef = React.createRef();
    this.handlePadClick = this.handlePadClick.bind(this);
  }
  componentDidMount() {
    this.audioRef.current.volume = this.props.volume / 100;
  }
  handlePadClick() {
    this.props.play(this.audioRef.current);
  }
  render() {
    return (
      <div
        id={this.props.pad.name}
        role="button" tabIndex="-1"
        className={'drum-pad' + (this.props.pad.active ? ' drum-pad--active' : '')}
        onClick={this.handlePadClick}
      >
        <span>{this.props.pad.key}</span>
        <audio
          className="clip"
          src={this.props.pad.src}
          data-name={this.props.pad.name}
          id={this.props.pad.key}
          preload="true"
          ref={this.audioRef}></audio>
      </div>
    );
  }
}

DrumPad.propTypes = {
  volume: PropTypes.number.isRequired,
  pad: PropTypes.object.isRequired,
  play: PropTypes.func.isRequired,
};

class HoldButton extends React.Component {
  constructor(props) {
    super(props);
    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseUp = this.handleMouseUp.bind(this);
    this.handleMouseOut = this.handleMouseOut.bind(this);
  }
  componentDidMount() {
    this.interval = null;
  }
  componentWillUnmount() {
    clearInterval(this.interval);
  }
  handleMouseDown() {
    this.interval = setInterval(this.props.handleHold, 50)
  }
  handleMouseUp() {
    clearInterval(this.interval);
  }
  handleMouseOut() {
    clearInterval(this.interval);
  }
  render() {
    return (
      <div
        role="button"
        className={this.props.class}
        onMouseDown={this.handleMouseDown}
        onMouseUp={this.handleMouseUp}
        onMouseOut={this.handleMouseOut}
        onTouchStart={this.handleMouseDown}
        onTouchEnd={this.handleMouseUp}
      ></div>
    );
  }
}

HoldButton.propTypes = {
  handleHold: PropTypes.func.isRequired,
  class: PropTypes.string.isRequired,
};

class VolumeDisplay extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className={'volume-display' + (this.props.power ? ' volume-display--on' : '')}>
        Vol: {this.props.volume} %
      </div>
    );
  }
}

VolumeDisplay.propTypes = {
  power: PropTypes.bool.isRequired,
  volume: PropTypes.number.isRequired,
};


class PowerButton extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
      <div
        role="button"
        className={this.props.buttonClass}
        onClick={this.props.handlePowerClick}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256.026 0c-24.816 0-45.004 20.188-45.004 45.004V226.02c0 24.816 20.188 45.004 45.004 45.004s45.004-20.188 45.004-45.004V45.004C301.03 20.188 280.842 0 256.026 0z" fill="#933EC5" /><path d="M406.625 118.959c-18.939-17.083-46.502-15.14-63.041 1.873-16.632 17.109-17.917 46.086 3.153 65.296 33.44 30.395 50.343 76.459 42.336 122.928-10.868 63.067-65.717 112.767-133.05 112.915-68.971.152-121.809-50.77-132.708-110.617-8.497-46.747 7.179-93.553 41.972-125.197 21.01-19.127 19.913-48.232 3.234-65.36-16.567-17.013-44.295-18.851-63.4-1.56-52.909 47.923-80.527 118.769-72.843 190.58C44.496 423.995 140.9 512 256.553 512c114.326 0 207.934-88.216 222.368-194.743 10.064-74.23-16.964-148.358-72.296-198.298z" fill="#933EC5" /></svg>
      </div>
    );
  }
}

PowerButton.propTypes = {
  buttonClass: PropTypes.string.isRequired,
  handlePowerClick: PropTypes.func.isRequired,
};

class Display extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className={'drum-display' + (this.props.power ? ' drum-display--on' : '')} id="display">
        {this.props.text}
      </div>
    );
  }
}

Display.propTypes = {
  text: PropTypes.string.isRequired,
  power: PropTypes.bool.isRequired,
};


class ButtonPanel extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className="button-panel">
        <PowerButton
          buttonClass={'power-button round-button' + (this.props.power ? ' round-button--on' : '')}
          handlePowerClick={this.props.handlePowerClick} />
        <HoldButton
          handleHold={this.props.handleVolumeDown}
          class={'vol-minus round-button' + (this.props.power ? ' round-button--on' : '')} />
        <HoldButton
          handleHold={this.props.handleVolumeUp}
          class={'vol-plus round-button' + (this.props.power ? ' round-button--on' : '')} />
      </div>
    );
  }
}


ButtonPanel.propTypes = {
  handlePowerClick: PropTypes.func.isRequired,
  handleVolumeUp: PropTypes.func.isRequired,
  handleVolumeDown: PropTypes.func.isRequired,
  power: PropTypes.bool.isRequired,
};

const DeviceFooter = () => {
  return (
    <div className="project-info">
      <p>Freecodecamp project:</p>
      <p>
        <a href="https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-drum-machine"
          target="_blank">Build a Drum Machine</a>
      </p>
      <p>made by <a href="https://codepen.io/askov" target="_blank">William Lau</a></p>
    </div>
  );
};

class App extends React.Component {
  render() {
    return (
      <div>
        <DrumMachine />
      </div>
    );
  }
}

ReactDOM.render(
  <App />,
  document.getElementById('app')
);-->
