<main class="container">
  <section class="message-board">
    <h1>Message Board</h1>
    <div id="load-data">
      <p>Loading...</p>
    </div>
  </section>
  <section class="type-message box-shadow">
    <h1>Reply</h1>
    <form>
      <div class="p-1 green-sheen">
        <input type="text" placeholder="Nickname" id="nickname" required />
      </div>
      <div class="p-1 teal-blue">
        <textarea placeholder="Type message here..." id="message" required></textarea>
      </div>
      <div class="cambridge-blue inline-block position-right">
        <button type="submit">SEND</button>
      </div>
    </form>
    <div class="error-message">
      <p>Error! Please fill in all the fields.</p>
      <span class="close position-right">&times;</span>
    </div>
  </section>
</main>

body,
html {
  padding: 0;
  margin: 0;
}

p {
  word-break: break-all;
}

body {
  font-family: 'Roboto', sans-serif;
  font-size: 100%;
  color: #F4E9CD;
  background: #031926;
}

.container {
  width: 100%;
  max-width: 960px;
  margin: 2rem auto;
}

.type-message form { position: relative; }

.box-shadow { box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.16); }

textarea,
input,
button {
  /* resets default browser settings */
  border: 0;
  background: none;
  padding: 0;
  /* set new colours and font to form elements */
  font-family: 'Roboto', sans-serif;
  font-size: 1rem;
  color: #F4E9CD;
  /* calc for making the textarea and input smaller */
  width: calc(100% - 11rem);
}

textarea { min-height: 4rem; }

button {
  cursor: pointer;
  font-size: 1.2rem;
  padding: 4rem;
  width: auto;
}

.inline-block { display: inline-block; }

.position-right {
  position: absolute;
  top: 0;
  right: 0;
}

textarea::placeholder,
input::placeholder { color: #F4E9CD; }

.maastricht-blue { background: #031926; }
.teal-blue { background: #468189; }
.green-sheen { background: #77ACA2; }
.cambridge-blue { background: #9DBEBB; }

.p-1 { padding: 1rem; }
.p-05 { padding: .5rem; }

article:not(:first-of-type) { margin-top: 3.5rem; }
article:last-of-type { margin-bottom: 3rem; }

.float-right {
  /* to move the area below the box-shadow */
  position: relative;
  z-index: -1;
  /* to align the meta data to the right */
  float: right;
  margin-top: 0.15rem;
}

p,
span,
textarea,
input {
  font-weight: 300;
  margin: 0;
}

.small { font-size: 0.75rem; }

h1,
button { font-weight: 400; }

.error-message {
  /* hide error message at load */
  display: none;

  position: relative;
  margin-top: 0.4rem;
  background: #F4E9CD;
  color: #031926;
  padding: 0.4rem;
  font-size: 0.85rem;

  transition: display 0.2s linear;
}

.error-message .close {
  font-size: 1.25rem;
  margin-right: 0.4rem;
  cursor: pointer;
}

.error-message.show {
  /* show error message */
  display: block;
  transition: display 0.2s linear;
}

@media all and (max-width: 960px) {
  .container {
    margin: 0;
    padding: 1rem;
    width: auto;
  }
  h1 { margin-top: 0; }
}

/* Small screen changes */

@media all and (max-width: 567px) {
  .position-right { position: relative; }
  textarea,
  input,
  button { width: 100%; }
  .inline-block { display: block; }
  button { padding: 1rem; }
}

// Initialize Firebase
// TODO: Replace with your project's customized code snippet
const config = {
  // Replace with API Key and Project ID
};
/* end replace */
firebase.initializeApp(config);

// Initialize Cloud Firestore through Firebase
const db = firebase.firestore();
const settings = {
  timestampsInSnapshots: true
};
db.settings(settings);

const form = document.querySelector("form");
const nickname = document.getElementById("nickname");
const message = document.getElementById("message");
const errorMessage = document.querySelector(".error-message");
const closebtn = document.querySelector(".error-message .close");
const dataArea = document.getElementById("load-data");

form.addEventListener("submit", e => {
  e.preventDefault();

  if (nickname.value !== "" && message.value !== "") {
    db
      .collection("messages")
      .add({
        nickname: nickname.value,
        message: message.value,
        date: new Date()
      })
      .then(docRef => {
        console.log("Document written with ID: ", docRef.id);
        // window.location.reload();
      })
      .catch(error => {
        console.error("Error adding document: ", error);
      });
    errorMessage.classList.remove("show");
    nickname.value = "";
    message.value = "";
  } else {
    errorMessage.classList.add("show");
  }
});

closebtn.addEventListener("click", () => {
  errorMessage.classList.remove("show");
});

// A function for formatting a date to DD Month YY - HH:mm
formatDate = d => {
  // Months array to get the month in string format
  const months = new Array(
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  );
  // get the month
  const month = d.getMonth();
  // get the day
  const day = d.getDate();
  // get the year
  let year = d.getFullYear();
  // pull the last two digits of the year
  year = year.toString().substr(-2);
  // get the hours
  const hours = d.getHours();
  // get the minutes
  const minutes = ("0" + d.getMinutes()).slice(-2);
  //return the string "DD Month YY - HH:mm"
  return (
    day + " " + months[month] + " '" + year + " - " + hours + ":" + minutes
  );
};

db
  .collection("messages")
  .orderBy("date")
  .onSnapshot(querySnapshot => {
    let messages = [];
    querySnapshot.forEach(chat => {
      messages.push(chat.data());
    });

    if (messages.length !== 0) {
      dataArea.innerHTML = "";
    } else {
      dataArea.innerHTML = "<p>No messages</p>";
    }

    for (let i = 0; i < messages.length; i++) {
      const createdOn = new Date(messages[i].date.seconds * 1000);
      dataArea.innerHTML += `
							<article>
								<div class="p-1 teal-blue box-shadow">
									<p>${messages[i].message}</p>
								</div>
								<div class="float-right">
									<span class="green-sheen p-05 small">
										${messages[i].nickname}
									</span>
									<span class="cambridge-blue p-05 small">
										${formatDate(createdOn)}
									</span>
								</div>
							</article>
						`;
    }
  });


